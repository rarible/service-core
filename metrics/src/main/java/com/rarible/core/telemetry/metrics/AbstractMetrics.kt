package com.rarible.core.telemetry.metrics

import io.micrometer.core.instrument.Counter
import io.micrometer.core.instrument.ImmutableTag
import io.micrometer.core.instrument.MeterRegistry
import io.micrometer.core.instrument.Tag
import io.micrometer.core.instrument.Timer
import java.time.Duration
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicReference

abstract class AbstractMetrics(
    protected val meterRegistry: MeterRegistry
) {
    private val gauges = Meters(::createGauge)
    private val counters = Meters(::createCounter)
    private val timers = Meters(::createTimer)

    protected fun tag(key: String, value: String): Tag {
        return ImmutableTag(key, value)
    }

    protected fun status(status: String): Tag {
        return tag("status", status)
    }

    protected fun type(type: String): Tag {
        return tag("type", type)
    }

    protected fun source(value: String): Tag {
        return tag("source", value)
    }

    protected fun increment(name: String, vararg tags: Tag) {
        counters.getOrCreate(name, tags.toList()).increment()
    }

    protected fun record(name: String, duration: Duration, vararg tags: Tag) {
        timers.getOrCreate(name, tags.toList()).record(duration)
    }

    protected fun record(
        name: String,
        duration: Duration,
        objectives: List<Duration>,
        vararg tags: Tag
    ) {
        timers.getOrCreate(name, tags.toList()) { inputName, inputTags ->
            Timer.builder(inputName)
                .tags(inputTags)
                // Hack to exclude 70+ buckets, generated by Prometheus metrics and keep only SLO values
                .maximumExpectedValue(objectives.last())
                .minimumExpectedValue(objectives.last())
                .publishPercentileHistogram()
                .serviceLevelObjectives(*objectives.toTypedArray())
                .register(meterRegistry)
        }.record(duration)
    }

    protected fun set(name: String, value: Number, vararg tags: Tag) {
        gauges.getOrCreate(name, tags.toList()).set(value.toDouble())
    }

    protected fun createGauge(name: String, tags: List<Tag>): AtomicReference<Double> {
        val gauge: AtomicReference<Double> = AtomicReference(0.0)
        meterRegistry.gauge(name, tags, gauge) { it.get() }
        return gauge
    }

    protected fun createTimer(name: String, tags: List<Tag>): Timer {
        return meterRegistry.timer(name, tags)
    }

    protected fun createCounter(name: String, tags: List<Tag>): Counter {
        return meterRegistry.counter(name, tags)
    }

    private class Meters<T>(private val defaultConstructor: (name: String, tags: List<Tag>) -> T) {
        val meters = ConcurrentHashMap<MeterId, T>()
        fun getOrCreate(name: String, tags: List<Tag>) = getOrCreate(name, tags, defaultConstructor)

        fun getOrCreate(name: String, tags: List<Tag>, constructor: (name: String, tags: List<Tag>) -> T): T {
            return meters.computeIfAbsent(MeterId(name, tags)) {
                constructor(name, tags)
            }
        }
    }

    protected data class MeterId(
        val name: String,
        val tags: List<Tag> = emptyList()
    )
}
